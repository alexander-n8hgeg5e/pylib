from os import listdir
import subprocess as sp
from sys import argv
from os.path import normpath

def find_dupes(set_of_dirs):
    """
    Finds sets of duplicates via external prog fdupes.
    Returns list one entry per dupeset.
    Each entry a dict with keys filesize, dupes.
    The value of dupes is a list of pathes.
    """
    subdirs = [normpath(p) for p in set_of_dirs]
    outp=sp.check_output(['fdupes','-R','-S']+subdirs).decode()
    lines = [ i.strip() for i in outp.split("\n") ]

    sets=[]
    class Dupeset(dict):
        def __init__(self):
            self.update({"size":None,"dupes":[]})
    dupeset=Dupeset()
    for line in lines:
        if line[-5:] == "each:" :
            # start of set
            # save old one if it makes sense
            if len(dupeset["dupes"]) != 0:
                sets.append(dupeset)
            # to be sure to have no old data
            # left over,
            # always recreating the dupeset is a good idea
            dupeset = Dupeset()
            dupeset["size"] = int(line.strip().split(" ")[0])
        elif len(line) != 0:
            dupeset["dupes"].append(normpath(line))
    return sets

def split_dupesets_to_subdir_sets(sets,subdirs):
    """
    Splits the duplicate sets into subsets by subdir.
    Input is sets like generated by this_module.find_dupes.
    Returns the pathes replaced by a dict containing the subsets.
    """
    subdirs=[normpath(p) for p in subdirs]
    for a in sets:
        set_1 = dict(zip(subdirs,[[] for i in range(len(subdirs))]))
        for path in a['dupes']:
            for subdir in subdirs:
                if path[:len(subdir)+1] == subdir +"/":
                    set_1[subdir].append(path)
        a['dupes']=set_1
    return sets
